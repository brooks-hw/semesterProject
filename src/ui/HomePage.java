package ui;

import data.PortfolioManager;
import data.StockAPIClient;
import models.InvestmentData;
import models.PriceEntry;
import models.User;
import models.UserInvestment;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;


// Most code generated by ChatGPT, and reformatted/tweaked by Brooks

public class HomePage extends JPanel {

    //Home page will be built around the individual user
    private User user;
    private iScreenManager screenManager;
    private DefaultTableModel tableModel;
    private StockAPIClient APIClient;
    private TickerPanel tickerPanel;

    private ChartPanel chartComponent;
    private JFreeChart currentChart;

    //Set up a blank HomePage before user is authenticated (in LoginPage)
    public HomePage(iScreenManager screenManager) {
        this.screenManager = screenManager;
    }
    //
    // Set up HomePage with correct data after user is authenticated (in LoginPage)
    public void setup(User user) {
        this.user = user;
        this.APIClient = new StockAPIClient();

        //The user's portfolio is empty and is being created from a template
        if (user.getPortfolio().isEmpty() && user.getUsingTemplate()) {
           PortfolioManager.loadFromTemplate(user);
        }

        user.updateBalance(new StockAPIClient()); // âœ… THIS IS CRITICAL

        removeAll(); //removes all components (buttons, panels, charts etc) used to fix TickerPanel
        revalidate(); //forced recalculation of UI
        repaint();

        setLayout(new BorderLayout());
        tickerPanel = new TickerPanel(APIClient);

        add(tickerPanel, BorderLayout.NORTH);
        add(createChartPanel(user), BorderLayout.CENTER);
        add(createRightPanel(), BorderLayout.EAST);

        System.out.println(user.getUsername() + " " +  user.getPassword());
    }



    private JPanel createChartPanel(User user) {
        JPanel leftPanel = new JPanel(new BorderLayout());

        // === 1. User Info Box (Top of chart panel) ===
        JPanel userInfoPanel = new JPanel();
        userInfoPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 10));
        userInfoPanel.setBackground(new Color(245, 245, 245));
        userInfoPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

        JLabel nameLabel = new JLabel("Welcome, " + user.getName());
        nameLabel.setFont(new Font("SansSerif", Font.BOLD, 20));
        nameLabel.setForeground(Color.WHITE);

        JLabel investmentLabel = new JLabel("Total Invested: $" + user.getBalance());
        investmentLabel.setFont(new Font("SansSerif", Font.PLAIN, 16));
        investmentLabel.setForeground(Color.WHITE);

        userInfoPanel.add(nameLabel);
        userInfoPanel.add(Box.createHorizontalStrut(30)); // space between labels
        userInfoPanel.add(investmentLabel);

        userInfoPanel.setBackground(new Color(20, 30, 70));

        leftPanel.add(userInfoPanel, BorderLayout.NORTH);

        // === 2. Chart ===
        currentChart = createPortfolioChart("1W"); // Default view
        chartComponent = new ChartPanel(currentChart);

        leftPanel.add(chartComponent, BorderLayout.CENTER);

        // === 3. Time Buttons + Logout ===
        JPanel buttonPanel = new JPanel(new BorderLayout());
        buttonPanel.setPreferredSize(new Dimension(0, 50));
        buttonPanel.setBackground(new Color(20, 30, 70));
        buttonPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

        JButton logoutButton = new JButton("Logout");
        logoutButton.setBackground(Color.RED);
        logoutButton.setForeground(Color.BLACK);
        buttonPanel.add(logoutButton, BorderLayout.WEST);

        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                PortfolioManager.saveToFile(user);
                User.logOutInstance();
                ((MainFrame) screenManager).loginPage.returnLogin();
                screenManager.switchTo("Login Page");
            }
        });

        JPanel timeButtons = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        timeButtons.setBackground(new Color(20, 30, 70));

        String[] ranges = {"1D", "1W", "1M", "1Y"};
        for (String label : ranges) {
            JButton button = new JButton(label);
            button.setBackground(new Color(255, 140, 0));
            button.setForeground(Color.BLACK);
            timeButtons.add(button);

            button.addActionListener(e -> {
                JFreeChart newChart = createPortfolioChart(label);
                chartComponent.setChart(newChart);
            });
        }

        buttonPanel.add(timeButtons, BorderLayout.CENTER);
        leftPanel.add(buttonPanel, BorderLayout.SOUTH);

        return leftPanel;
    }

    private JPanel createRightPanel() {
        JPanel rightPanel = new JPanel(new BorderLayout());
        rightPanel.setPreferredSize(new Dimension(350, 0));
        rightPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

        // Table Column Names
        String[] columnNames = {"NAME", "TYPE", "HOLDING", "PRICE", "GAIN"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JTable stockTable = new JTable(tableModel);
        stockTable.setRowHeight(30);

        // Column Preferences
        stockTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        stockTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        stockTable.getColumnModel().getColumn(2).setPreferredWidth(60);
        stockTable.getColumnModel().getColumn(3).setPreferredWidth(60);

        JScrollPane scrollPane = new JScrollPane(stockTable);
        rightPanel.add(scrollPane, BorderLayout.CENTER);

        // Populate table from user's portfolio
        for (UserInvestment inv : user.getPortfolio()) {
            String symbol = inv.symbol;
            String type = inv.type;
            double quantity = inv.quantity;
            double buyPrice = inv.buyPrice;

            InvestmentData data = APIClient.getInvestmentMap().get(symbol);
            double latestPrice = buyPrice;

            if (data != null && data.recentPrices != null && !data.recentPrices.isEmpty()) {
                PriceEntry lastEntry = data.recentPrices.get(data.recentPrices.size() - 1);
                latestPrice = lastEntry.price;
            }

            double gain = ((latestPrice - buyPrice) / buyPrice) * 100.0;

            // FORMAT everything
            String displayQty = type.equalsIgnoreCase("Crypto")
                    ? String.format("%.8f", quantity)
                    : String.format("%.2f", quantity);

            String displayPrice = String.format("%.2f", latestPrice);
            String displayGain = String.format("%.2f", gain);

            tableModel.addRow(new Object[]{symbol, type, displayQty, displayPrice, displayGain});
        }

        // Buttons
        JPanel userButtonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        userButtonPanel.setPreferredSize(new Dimension(0, 50));
        userButtonPanel.setBackground(new Color(20, 30, 70));
        userButtonPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));

        JButton addButton = new JButton("Add Stock");
        JButton removeButton = new JButton("Remove Stock");
        JButton resultsButton = new JButton("Risk Profile");

        addButton.addActionListener(e -> screenManager.switchTo("Add Investment"));
        removeButton.addActionListener(e -> ((MainFrame) screenManager).showRemoveInvestmentPage());
        resultsButton.addActionListener(e -> screenManager.switchTo("Results Page"));

        addButton.setBackground(new Color(255, 140, 0));
        addButton.setForeground(Color.BLACK);
        removeButton.setBackground(new Color(255, 140, 0));
        removeButton.setForeground(Color.BLACK);
        resultsButton.setBackground(new Color(144, 238, 144));
        resultsButton.setForeground(Color.BLACK);

        userButtonPanel.add(addButton);
        userButtonPanel.add(removeButton);
        userButtonPanel.add(resultsButton);

        rightPanel.add(userButtonPanel, BorderLayout.SOUTH);

        return rightPanel;
    }

    public void setUser(User user) {
        this.user = user;
    }

    private JFreeChart createPortfolioChart(String range) {
        TimeSeries series = new TimeSeries("Total Portfolio Value");

        Map<String, InvestmentData> dataMap = APIClient.getInvestmentMap();

        if (range.equals("1D")) {
            // For 1D use today_prices (HH:mm timestamps)
            Map<Integer, Double> hourToValue = new TreeMap<>();

            for (UserInvestment inv : user.getPortfolio()) {
                InvestmentData data = dataMap.get(inv.symbol);
                if (data == null || data.todayPrices == null) continue;

                for (PriceEntry entry : data.todayPrices) {
                    try {
                        int hour = Integer.parseInt(entry.timestamp.substring(0, 2));
                        double value = inv.quantity * entry.price;
                        hourToValue.put(hour, hourToValue.getOrDefault(hour, 0.0) + value);
                    } catch (Exception e) {
                        System.err.println("Invalid timestamp: " + entry.timestamp);
                    }
                }
            }

            for (Map.Entry<Integer, Double> entry : hourToValue.entrySet()) {
                series.add(new Hour(entry.getKey(), new Day()), entry.getValue());
            }

            TimeSeriesCollection dataset = new TimeSeriesCollection(series);
            return ChartFactory.createTimeSeriesChart(
                    "Portfolio Value (1D)",
                    "Hour",
                    "USD",
                    dataset,
                    false,
                    false,
                    false
            );
        }

        // For 1W, 1M, 1Y use daily date-based prices
        Map<LocalDate, Double> dateToValue = new TreeMap<>();

        for (UserInvestment inv : user.getPortfolio()) {
            InvestmentData data = dataMap.get(inv.symbol);
            if (data == null) continue;

            List<PriceEntry> prices = switch (range) {
                case "1W" -> data.recentPrices.subList(Math.max(0, data.recentPrices.size() - 7), data.recentPrices.size());
                case "1M" -> data.recentPrices;
                case "1Y" -> data.historicalPrices;
                default -> List.of();
            };

            for (PriceEntry entry : prices) {
                try {
                    LocalDate date = LocalDate.parse(entry.timestamp); // expects yyyy-MM-dd
                    double value = inv.quantity * entry.price;
                    dateToValue.put(date, dateToValue.getOrDefault(date, 0.0) + value);
                } catch (Exception e) {
                    System.err.println("Invalid date format: " + entry.timestamp);
                }
            }
        }

        for (Map.Entry<LocalDate, Double> entry : dateToValue.entrySet()) {
            LocalDate date = entry.getKey();
            series.add(new Day(date.getDayOfMonth(), date.getMonthValue(), date.getYear()), entry.getValue());
        }

        TimeSeriesCollection dataset = new TimeSeriesCollection(series);
        return ChartFactory.createTimeSeriesChart(
                "Portfolio Value (" + range + ")",
                "Date",
                "USD",
                dataset,
                false,
                false,
                false
        );
    }
}
